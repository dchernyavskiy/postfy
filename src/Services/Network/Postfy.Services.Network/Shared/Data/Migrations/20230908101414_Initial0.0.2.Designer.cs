// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Postfy.Services.Network.Shared.Data;

#nullable disable

namespace Postfy.Services.Network.Shared.Data.Migrations
{
    [DbContext(typeof(NetworkDbContext))]
    [Migration("20230908101414_Initial0.0.2")]
    partial class Initial002
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Postfy.Services.Network.Chats.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.HasKey("Id")
                        .HasName("pk_chats");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_chats_id");

                    b.ToTable("chats", "network");
                });

            modelBuilder.Entity("Postfy.Services.Network.Comments.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_comments_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_comments_parent_id");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_comments_post_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", "network");
                });

            modelBuilder.Entity("Postfy.Services.Network.Messages.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsPost")
                        .HasColumnType("boolean")
                        .HasColumnName("is_post");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_messages");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_messages_chat_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_messages_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_messages_parent_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_messages_sender_id");

                    b.ToTable("messages", "network");
                });

            modelBuilder.Entity("Postfy.Services.Network.Posts.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("caption");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_posts_id");

                    b.HasIndex("MessageId")
                        .IsUnique()
                        .HasDatabaseName("ix_posts_message_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_posts_user_id");

                    b.ToTable("posts", "network");
                });

            modelBuilder.Entity("Postfy.Services.Network.Reactions.Models.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_liked");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_reactions");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_reactions_id");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_reactions_post_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reactions_user_id");

                    b.ToTable("reactions", "network");
                });

            modelBuilder.Entity("Postfy.Services.Network.Users.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("profile_name");

                    b.Property<DateTime>("SignupDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("signup_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_users_id");

                    b.ToTable("users", "network");
                });

            modelBuilder.Entity("chat_user", b =>
                {
                    b.Property<Guid>("chat_id")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("chat_id", "user_id")
                        .HasName("pk_chat_user");

                    b.HasIndex("user_id")
                        .HasDatabaseName("ix_chat_user_user_id");

                    b.ToTable("chat_user", "network");
                });

            modelBuilder.Entity("post_user", b =>
                {
                    b.Property<Guid>("post_id")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("post_id", "user_id")
                        .HasName("pk_post_user");

                    b.HasIndex("user_id")
                        .HasDatabaseName("ix_post_user_user_id");

                    b.ToTable("post_user", "network");
                });

            modelBuilder.Entity("subscriptions", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid")
                        .HasColumnName("follower_id");

                    b.Property<Guid>("FollowingId")
                        .HasColumnType("uuid")
                        .HasColumnName("following_id");

                    b.HasKey("FollowerId", "FollowingId")
                        .HasName("pk_subscriptions");

                    b.HasIndex("FollowingId")
                        .HasDatabaseName("ix_subscriptions_following_id");

                    b.ToTable("subscriptions", "network");
                });

            modelBuilder.Entity("Postfy.Services.Network.Comments.Models.Comment", b =>
                {
                    b.HasOne("Postfy.Services.Network.Comments.Models.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_comments_comments_parent_id");

                    b.HasOne("Postfy.Services.Network.Posts.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_posts_post_id");

                    b.HasOne("Postfy.Services.Network.Users.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Postfy.Services.Network.Messages.Models.Message", b =>
                {
                    b.HasOne("Postfy.Services.Network.Chats.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_messages_chats_chat_id");

                    b.HasOne("Postfy.Services.Network.Messages.Models.Message", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_messages_messages_parent_id");

                    b.HasOne("Postfy.Services.Network.Users.Models.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_sender_id");

                    b.OwnsMany("Postfy.Services.Network.Shared.Models.Media", "Medias", b1 =>
                        {
                            b1.Property<Guid?>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid>("MessageId")
                                .HasColumnType("uuid")
                                .HasColumnName("message_id");

                            b1.Property<int?>("Position")
                                .HasColumnType("integer")
                                .HasColumnName("position");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasColumnName("type");

                            b1.Property<string>("Url")
                                .HasColumnType("text")
                                .HasColumnName("url");

                            b1.HasKey("Id")
                                .HasName("pk_message_medias");

                            b1.HasIndex("Id")
                                .IsUnique()
                                .HasDatabaseName("ix_message_medias_id");

                            b1.HasIndex("MessageId")
                                .HasDatabaseName("ix_message_medias_message_id");

                            b1.ToTable("message_medias", "network");

                            b1.WithOwner()
                                .HasForeignKey("MessageId")
                                .HasConstraintName("fk_message_medias_messages_message_id");
                        });

                    b.Navigation("Chat");

                    b.Navigation("Medias");

                    b.Navigation("Parent");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Postfy.Services.Network.Posts.Models.Post", b =>
                {
                    b.HasOne("Postfy.Services.Network.Messages.Models.Message", "Message")
                        .WithOne("Post")
                        .HasForeignKey("Postfy.Services.Network.Posts.Models.Post", "MessageId")
                        .HasConstraintName("fk_posts_messages_message_id");

                    b.HasOne("Postfy.Services.Network.Users.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_users_user_id");

                    b.OwnsMany("Postfy.Services.Network.Shared.Models.Media", "Medias", b1 =>
                        {
                            b1.Property<Guid?>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int?>("Position")
                                .HasColumnType("integer")
                                .HasColumnName("position");

                            b1.Property<Guid>("PostId")
                                .HasColumnType("uuid")
                                .HasColumnName("post_id");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasColumnName("type");

                            b1.Property<string>("Url")
                                .HasColumnType("text")
                                .HasColumnName("url");

                            b1.HasKey("Id")
                                .HasName("pk_post_medias");

                            b1.HasIndex("Id")
                                .IsUnique()
                                .HasDatabaseName("ix_post_medias_id");

                            b1.HasIndex("PostId")
                                .HasDatabaseName("ix_post_medias_post_id");

                            b1.ToTable("post_medias", "network");

                            b1.WithOwner()
                                .HasForeignKey("PostId")
                                .HasConstraintName("fk_post_medias_posts_post_id");
                        });

                    b.Navigation("Medias");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Postfy.Services.Network.Reactions.Models.Reaction", b =>
                {
                    b.HasOne("Postfy.Services.Network.Posts.Models.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_reactions_posts_post_id");

                    b.HasOne("Postfy.Services.Network.Users.Models.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_reactions_users_user_id");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Postfy.Services.Network.Users.Models.User", b =>
                {
                    b.OwnsOne("Postfy.Services.Network.Users.Models.NotificationSettings", "NotificationSettings", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<bool>("SomeoneFollowed")
                                .HasColumnType("boolean")
                                .HasColumnName("notification_settings_someone_followed");

                            b1.Property<bool>("SomeoneLikedPost")
                                .HasColumnType("boolean")
                                .HasColumnName("notification_settings_someone_liked_post");

                            b1.Property<bool>("SomeoneMentioned")
                                .HasColumnType("boolean")
                                .HasColumnName("notification_settings_someone_mentioned");

                            b1.Property<bool>("SomeoneSendFollowRequest")
                                .HasColumnType("boolean")
                                .HasColumnName("notification_settings_someone_send_follow_request");

                            b1.Property<bool>("SomeoneSendMessage")
                                .HasColumnType("boolean")
                                .HasColumnName("notification_settings_someone_send_message");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "network");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("Postfy.Services.Network.Users.Models.PrivacySettings", "PrivacySettings", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int?>("WhoCanFollowMe")
                                .HasColumnType("integer")
                                .HasColumnName("privacy_settings_who_can_follow_me");

                            b1.Property<int?>("WhoCanMessageMe")
                                .HasColumnType("integer")
                                .HasColumnName("privacy_settings_who_can_message_me");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "network");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.OwnsOne("Postfy.Services.Network.Shared.Models.Media", "ProfileImage", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<Guid?>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("profile_image_id");

                            b1.Property<int?>("Position")
                                .HasColumnType("integer")
                                .HasColumnName("profile_image_position");

                            b1.Property<string>("Type")
                                .HasColumnType("text")
                                .HasColumnName("profile_image_type");

                            b1.Property<string>("Url")
                                .HasColumnType("text")
                                .HasColumnName("profile_image_url");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "network");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_users_users_id");
                        });

                    b.Navigation("NotificationSettings");

                    b.Navigation("PrivacySettings");

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("chat_user", b =>
                {
                    b.HasOne("Postfy.Services.Network.Chats.Models.Chat", null)
                        .WithMany()
                        .HasForeignKey("chat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_user_chats_chat_id");

                    b.HasOne("Postfy.Services.Network.Users.Models.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_user_users_user_id");
                });

            modelBuilder.Entity("post_user", b =>
                {
                    b.HasOne("Postfy.Services.Network.Posts.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_user_posts_post_id");

                    b.HasOne("Postfy.Services.Network.Users.Models.User", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_user_users_user_id");
                });

            modelBuilder.Entity("subscriptions", b =>
                {
                    b.HasOne("Postfy.Services.Network.Users.Models.User", "Follower")
                        .WithMany("FollowerSubscriptions")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_users_follower_id");

                    b.HasOne("Postfy.Services.Network.Users.Models.User", "Following")
                        .WithMany("FollowingSubscriptions")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscriptions_users_following_id");

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("Postfy.Services.Network.Chats.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Postfy.Services.Network.Comments.Models.Comment", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Postfy.Services.Network.Messages.Models.Message", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Postfy.Services.Network.Posts.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Postfy.Services.Network.Users.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FollowerSubscriptions");

                    b.Navigation("FollowingSubscriptions");

                    b.Navigation("Messages");

                    b.Navigation("Posts");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
